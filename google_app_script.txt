function doGet(e) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var data = sheet.getDataRange().getValues();
    var games = [];
    
    // Skip header row
    // New column order: name, imageUrl, players, duration, cost, available, etc.
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      if (row[0]) { // If name exists
        games.push({
          id: i,
          name: row[0],          // Column A: Name
          imageUrl: row[1] || null,  // Column B: Image URL
          players: row[2],       // Column C: Players
          duration: row[3],      // Column D: Duration
          cost: parseFloat(row[4]) || 0,  // Column E: Cost
          available: row[5] === 'TRUE',    // Column F: Available
          checkedOutTo: row[6] || null,    // Column G: CheckedOutTo
          email: row[7] || null,           // Column H: Email
          building: row[8] || null,        // Column I: Building
          apartment: row[9] || null,       // Column J: Apartment
          dueDate: row[10] || null,        // Column K: DueDate
          lastUpdated: row[11] || null     // Column L: Timestamp
        });
      }
    }
    
    return ContentService.createTextOutput(JSON.stringify(games))
      .setMimeType(ContentService.MimeType.JSON);
  } catch(error) {
    return ContentService.createTextOutput(JSON.stringify({
      error: true,
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  var lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000);
    
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var data = JSON.parse(e.postData.contents);
    var row = data.gameId + 1; // Add 1 for header row

    // Log the incoming data for debugging
    Logger.log('Received data: ' + JSON.stringify(data));
    
    if (data.action === 'updateImage') {
      // Update image URL (Column B)
      sheet.getRange(row, 2).setValue(data.imageUrl);
      // Update timestamp (Column L)
      sheet.getRange(row, 12).setValue(new Date());
      
      Logger.log('Image URL updated for game ID: ' + data.gameId);
    }
    else if (data.action === 'checkout') {
      // Update the sheet for checkout
      sheet.getRange(row, 6).setValue('FALSE'); // Available (Column F)
      sheet.getRange(row, 7).setValue(data.name); // CheckedOutTo (Column G)
      sheet.getRange(row, 8).setValue(data.email); // Email (Column H)
      sheet.getRange(row, 9).setValue(data.building); // Building (Column I)
      sheet.getRange(row, 10).setValue(data.apartment); // Apartment (Column J)
      sheet.getRange(row, 11).setValue(data.dueDate); // DueDate (Column K)
      sheet.getRange(row, 12).setValue(new Date()); // Timestamp (Column L)
      
      Logger.log('Checkout processed for game ID: ' + data.gameId);
    } 
    else if (data.action === 'return') {
      // Update the sheet for return
      sheet.getRange(row, 6).setValue('TRUE'); // Available (Column F)
      sheet.getRange(row, 7).setValue(''); // CheckedOutTo (Column G)
      sheet.getRange(row, 8).setValue(''); // Email (Column H)
      sheet.getRange(row, 9).setValue(''); // Building (Column I)
      sheet.getRange(row, 10).setValue(''); // Apartment (Column J)
      sheet.getRange(row, 11).setValue(''); // DueDate (Column K)
      sheet.getRange(row, 12).setValue(new Date()); // Timestamp (Column L)
      
      Logger.log('Return processed for game ID: ' + data.gameId);
    }

    // Create timestamp for tracking
    var timestamp = new Date();
    
    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      action: data.action,
      gameId: data.gameId,
      timestamp: timestamp
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch(error) {
    // Log the error
    Logger.log('Error: ' + error.toString());
    
    return ContentService.createTextOutput(JSON.stringify({
      error: true,
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  } finally {
    if (lock.hasLock()) {
      lock.releaseLock();
    }
  }
}

// Utility function to clear all checkouts (for admin use)
function clearAllCheckouts() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var lastRow = sheet.getLastRow();
  
  // Start from row 2 to skip header
  for(var i = 2; i <= lastRow; i++) {
    sheet.getRange(i, 6).setValue('TRUE'); // Available (Column F)
    sheet.getRange(i, 7).setValue(''); // CheckedOutTo (Column G)
    sheet.getRange(i, 8).setValue(''); // Email (Column H)
    sheet.getRange(i, 9).setValue(''); // Building (Column I)
    sheet.getRange(i, 10).setValue(''); // Apartment (Column J)
    sheet.getRange(i, 11).setValue(''); // DueDate (Column K)
    sheet.getRange(i, 12).setValue(new Date()); // Timestamp (Column L)
  }
}

// Utility function to add a new game
function addNewGame(name, imageUrl, players, duration, cost) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var lastRow = sheet.getLastRow() + 1;
  
  sheet.getRange(lastRow, 1).setValue(name); // Name
  sheet.getRange(lastRow, 2).setValue(imageUrl); // Image URL
  sheet.getRange(lastRow, 3).setValue(players); // Players
  sheet.getRange(lastRow, 4).setValue(duration); // Duration
  sheet.getRange(lastRow, 5).setValue(cost); // Cost
  sheet.getRange(lastRow, 6).setValue('TRUE'); // Available
  sheet.getRange(lastRow, 12).setValue(new Date()); // Timestamp
}

// Utility function to get all overdue games
function getOverdueGames() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var overdueGames = [];
  var today = new Date();
  
  // Skip header row
  for(var i = 1; i < data.length; i++) {
    var row = data[i];
    if(row[10] && row[5] === 'FALSE') { // If there's a due date (Column K) and game is checked out
      var dueDate = new Date(row[10]);
      if(dueDate < today) {
        overdueGames.push({
          name: row[0],
          imageUrl: row[1],
          checkedOutTo: row[6],
          email: row[7],
          building: row[8],
          apartment: row[9],
          dueDate: row[10]
        });
      }
    }
  }
  return overdueGames;
}

// Utility function to get checkout history
function getCheckoutHistory() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = sheet.getDataRange().getValues();
  var history = [];
  
  // Skip header row
  for(var i = 1; i < data.length; i++) {
    var row = data[i];
    if(row[6] || row[5] === 'FALSE') { // If there's a name or status is checked out
      history.push({
        gameName: row[0] || 'Unknown Game',
        imageUrl: row[1] || null,
        isAvailable: row[5] === 'TRUE',
        checkedOutTo: row[6] || 'N/A',
        email: row[7] || 'N/A',
        building: row[8] || 'N/A',
        apartment: row[9] || 'N/A',
        dueDate: row[10] || null,
        timestamp: row[11] || new Date()
      });
    }
  }
  
  // Sort by timestamp in descending order
  return history;
}
